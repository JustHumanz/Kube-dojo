worker_processes  1;
events {
    worker_connections  1024;
}

http {
    error_log logs/error.log;

    init_by_lua_block {
        cjson = require "cjson"

        upstream_servers = {}

        function find_upstream_servers(key)
            for k,v in pairs(upstream_servers) do
                if v == key then
                  return k,v
                end
            end
            return 0,nil

        end
    }
    
    upstream backend {
        server 127.0.0.1 fail_timeout=3;
        balancer_by_lua_block {
            local balancer = require("ngx.balancer")
    
            -- Pick a random backend
            local server = upstream_servers[math.random(#upstream_servers)]
    
            -- This block will only trigger if ngx.ctx.retry is not true.
            -- We set this to true during the initial request so future
            -- requests within this context will not go down this path.
            if not ngx.ctx.retry then
                ngx.ctx.retry = true
                -- set up more tries using the length of the server list minus 1.
                ok, err = balancer.set_more_tries(#upstream_servers - 1)
                if not ok then
                    ngx.log(ngx.ERR, "set_more_tries failed: ", err)
                end
            end
    
            ok, err = balancer.set_current_peer(server)
            if not ok then
                ngx.log(ngx.ERR, "set_current_peer failed: ", err)
                return ngx.exit(500)
            end
        }
    }
    
    # app 
    server {
        listen 80;

        location / {
            proxy_pass http://backend;
        }
    }

    # controller
    server {
        listen 9091;
        location /config {
            content_by_lua_block {
                if ngx.var.request_method == "GET" then
                    ngx.status = ngx.HTTP_OK
                    local upstream_servers_json = cjson.encode(upstream_servers)
                    ngx.print(upstream_servers_json)
                    return
                end
                
                if ngx.var.request_method ~= "POST" then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.print("Only POST and GET requests are allowed!")
                    return
                end

                ngx.req.read_body()
                local body = cjson.decode(ngx.req.get_body_data())
                local action = body['action']
                local new_stream = body['ip'] .. ":" .. body['port']

                if action == "add" then
                    _, val = find_upstream_servers(new_stream)
                    if val == nil then
                        table.insert(upstream_servers,new_stream)
                        ngx.log(ngx.INFO, "New upstream" .. new_stream)
                    else
                        ngx.print("Upstream already exist")
                    end

                elseif action == "del" then
                    key, val = find_upstream_servers(new_stream)
                    if key == 0 then
                        ngx.print("Upstream not found")
                    else
                        table.remove(upstream_servers,key)
                        ngx.log(ngx.INFO, "Delete upstream" .. val)
                    end                    
                else 
                    ngx.print("Invalid action")
                end
             }
        }

        
        -- location = /healthcheck {
        --     access_by_lua_block {
        --         local http = require "resty.http"
        --         local h = http.new()
        --         h:set_timeout(2 * 1000)
        --         for key,val in pairs(upstream_servers) do
        --             local url = "http://" .. val
        --             local res, err = h:request_uri(url, {method = "GET"})
        --             if err or not res or res.status ~= 204 then
        --                 table.remove(upstream_servers,key)
        --                 ngx.log(ngx.INFO, "Delete upstream" .. val)                        
        --             end
        --         end
        --     }
        -- }        
    }
}